version: "3.7"
services:

  gateway:
    build:
      context: gateway/docker
      dockerfile: nginx/Dockerfile
    ports:
      - "80:80"
      - "81:81"
      - "82:82"

  frontend:
    build:
      context: frontend/docker/nginx

  frontend-node:
    build:
      context: frontend/docker/node
    volumes:
      - ./frontend:/app
    command: npm run dev
    tty: true

  frontend-node-cli:
    build:
      context: frontend/docker/node
    volumes:
      - ./frontend:/app

  api:
    build:
      context: api/docker
      dockerfile: nginx/Dockerfile
    volumes:
      - ./api:/app

  api-admin:
    build:
      context: api/docker
      dockerfile: admin/Dockerfile
    volumes:
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      - ./api:/app
    environment:
      PHP_IDE_CONFIG: serverName=APP

  api-frontend:
    build:
      context: api/docker
      dockerfile: frontend/Dockerfile
    volumes:
      - ~/.composer-docker/cache:/root/.composer/cache:delegated
      - ./api:/app
    environment:
      PHP_IDE_CONFIG: serverName=APP

  api-postgres:
    image: postgres:12.2-alpine
    restart: always
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: app
    volumes:
      - api-postgres:/var/lib/postgresql/data
    ports:
      - "54321:5432"

  adminer:
    build:
      context: api/docker
      dockerfile: adminer/Dockerfile
    ports:
      - "8080:8080"

networks:
  default:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 122.122.221.0/28

volumes:
  api-postgres:
